/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package functionpanels;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.util.ArrayList;

import javax.swing.ButtonGroup;

import data.Function;
import data.Instruction;
import data.InstructionTimeUnit;
import data.Phase;
import data.TimeInstruction;

/**
 *
 * @author Ries
 */
public class RateFunctionPanel extends FunctionPanel {

    /**
     * Creates new form RateFunctionPanel
     */
    public RateFunctionPanel() {
    	
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    protected void initComponents() {

        jLabel_rate = new javax.swing.JLabel();
        jTextField_rate = new javax.swing.JTextField();
        jComboBox_time = new javax.swing.JComboBox();
        jTextField_time = new javax.swing.JTextField();
        jLabel_time = new javax.swing.JLabel();
        jToggleButton_withdraw = new javax.swing.JToggleButton();
        jToggleButton_infuse = new javax.swing.JToggleButton();
        
        buttongroup = new ButtonGroup();
        buttongroup.add(jToggleButton_withdraw);
        buttongroup.add(jToggleButton_infuse);

        jToggleButton_infuse.setSelected(true);

        jToggleButton_withdraw.setText("<");
        jToggleButton_infuse.setText(">");
        
        jToggleButton_withdraw.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	dir = "WDR";
            	updatePhase();
            }
        });
        jToggleButton_infuse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	dir = "INF";
            	updatePhase();
            }
        });
        
        jLabel_rate.setText("Rate (uL/mn):");

        jTextField_rate.setText("0");
        jTextField_rate.addFocusListener(new FocusListener() {
			@Override
			public void focusGained(FocusEvent arg0) {}
			@Override
			public void focusLost(FocusEvent arg0) {
            	updatePhase();
		}});
        jTextField_rate.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
            	updatePhase();
        }});


        jComboBox_time.setModel(new javax.swing.DefaultComboBoxModel(new String[] { InstructionTimeUnit.HOUR.getName(), InstructionTimeUnit.MIN.getName(), InstructionTimeUnit.SEC.getName() }));
        jComboBox_time.setSelectedIndex(1);
        jComboBox_time.addActionListener (new ActionListener () {
            public void actionPerformed(ActionEvent e) {
                updatePhase();
            }
        });
        
        jTextField_time.setText("0");
        jTextField_time.addFocusListener(new FocusListener() {
			@Override
			public void focusGained(FocusEvent arg0) {}
			@Override
			public void focusLost(FocusEvent arg0) {
            	updatePhase();
		}});
        jTextField_time.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
            	updatePhase();
        }});

        jLabel_time.setText("Time:");


        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel_rate)
                    .addComponent(jLabel_time))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jToggleButton_withdraw)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jToggleButton_infuse))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField_time)
                            .addComponent(jTextField_rate))
                        .addGap(18, 18, 18)
                        .addComponent(jComboBox_time, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel_rate)
                    .addComponent(jTextField_rate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox_time, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel_time)
                    .addComponent(jTextField_time, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jToggleButton_withdraw)
                    .addComponent(jToggleButton_infuse)))
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox jComboBox_time;
    private javax.swing.JLabel jLabel_rate;
    private javax.swing.JLabel jLabel_time;
    private javax.swing.JTextField jTextField_rate;
    private javax.swing.JTextField jTextField_time;
    private javax.swing.JToggleButton jToggleButton_infuse;
    private javax.swing.JToggleButton jToggleButton_withdraw;
    private ButtonGroup buttongroup;
    
    private String dir="INF";
    // End of variables declaration//GEN-END:variables
	@Override
	public void setPhase(Phase p) {
		if(p.getFunction().equals(possibleFunction[0]) || p.getFunction().equals(possibleFunction[1]) || p.getFunction().equals(possibleFunction[2])){
			this.currentphase = p;
			if(!p.getInstructions().isEmpty()){
				try{
					jTextField_rate.setText(p.getInstructions().get(0).getParameter());
					jTextField_time.setText(p.getInstructions().get(1).getParameter());
					jComboBox_time.setSelectedItem(((TimeInstruction) p.getInstructions().get(1)).getUnit().getName());
					dir = p.getInstructions().get(2).getParameter();
					if(dir.equals("INF")){
						jToggleButton_infuse.setSelected(true);
					} else if(dir.equals("WDR")){
						jToggleButton_withdraw.setSelected(true);
					}
				} catch(Exception e){
				}
			} else {
				jTextField_rate.setText("0");
				jTextField_time.setText("0");
				jComboBox_time.setSelectedIndex(1);
				dir = "INF";
				jToggleButton_infuse.setSelected(true);
			}
		}
	}

	@Override
	public void updatePhase() {
		if(instructions != null){
			if(instructions.size()>0){
				instructions.get(0).setParameter(jTextField_rate.getText());
				instructions.get(1).setParameter(jTextField_time.getText());
				InstructionTimeUnit unit = getUnit();
				((TimeInstruction) instructions.get(1)).setUnit(unit);
				instructions.get(2).setParameter(dir);
				
				currentphase.setInstructions(instructions);
			} 
		}
	}
	
	private InstructionTimeUnit getUnit(){
		String s = (String) jComboBox_time.getSelectedItem();
		if(s.equals(InstructionTimeUnit.HOUR.getName())){
			return InstructionTimeUnit.HOUR;
		} else if(s.equals(InstructionTimeUnit.SEC.getName())){
			return InstructionTimeUnit.SEC;
		} else {
			return InstructionTimeUnit.MIN;
		}
	}

	@Override
	public void setInstructions() {
		if(instructions != null){
			instructions.add(new Instruction("RAT",jTextField_rate.getText()));
			instructions.add(new TimeInstruction(InstructionTimeUnit.MIN,Double.parseDouble(jTextField_time.getText()),Double.parseDouble(jTextField_rate.getText())));
			instructions.add(new Instruction("DIR",dir));
		} else {
			instructions = new ArrayList<Instruction>();
			instructions.add(new Instruction("RAT",jTextField_rate.getText()));
			instructions.add(new TimeInstruction(InstructionTimeUnit.MIN,Double.parseDouble(jTextField_time.getText()),Double.parseDouble(jTextField_rate.getText())));
			instructions.add(new Instruction("DIR",dir));
		}
	}

	@Override
	public void setPossibleFunctions() {
		possibleFunction = new String[3];
		possibleFunction[0] = Function.RAT.getName();
		possibleFunction[1] = Function.INC.getName();
		possibleFunction[2] = Function.DEC.getName();
	}
}
